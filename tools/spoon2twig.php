<?php

// My Time Stamps trick
define('TIME', microtime(true));
define('EXTENSION', '.html.twig');
define('WEBROOT', __DIR__.'/../');

class Spoon2Twig
{
    private $interationNr = 0;
    private $previousTimeStamp = 0;
    private $start = "{# This file is generated by Spoon2Twig Converter #}\n\n";

    /**
     * Start Converter
     *
     * @param  array $argv  A list of arguments from php command line
     */
    public function start(array $argv)
    {
        // OUR INPUT AND REPLACE CODE
        if (!isset($argv[1])) exit('no arguments given ' . PHP_EOL);

        $force = (isset($argv[2]) && $argv[2] === 'forced');
        $input = (string) $argv[1];

        if ($input === 'all') {
            $this->convertAllFiles($force);
            return;
        }

        if ($this->isFile($input) && $force === true) {
            $this->write($input, $this->start.$this->ruleParser($this->getFile($input)));
            return;
        }

        if (!file_exists(str_replace('.tpl', EXTENSION, $input))) {
            $this->write($input, $this->start.$this->ruleParser($this->getFile($input)));
        }
        exit('twig version of ' . $input . ' exists, use the "forced" parameter to overwrite' . PHP_EOL);
    }

    /**
     * Stamps the time it takes from start to finnish
     *
     * @param  integer $int how precise you wish to measure
     */
    public function timestamp($int = null)
    {
      return (float)substr(microtime(true) - TIME ,0,(int)$int+5) * 1000;
    }

    /**
     * Project file converter
     * Will locate ever file in the project and convert in automagicly
     *
     * @param  boolean $force allow forced overwrite
     */
    public function convertAllFiles($force)
    {
        // collects template Paths
        $excluded = array();
        $excludes = array('.', '..', '.DS_Store');

        // possible locations
        $BasePath = array('Frontend/Themes', 'Backend/Modules', 'Frontend/Modules', 'Frontend');
        $templates = array('/Layout/Templates', '/Layout/Widgets', '/Core/Layout/Templates');

        $source = $this->getCorrectSourceVersion();

        $templatePaths = array();
        foreach ($BasePath as $BPath)
        {
            $possiblePath = $source . $BPath;
            if (is_dir(WEBROOT . $possiblePath)) {
                $tpls = array_diff(scandir(WEBROOT . $possiblePath), $excludes);

                foreach ($tpls as $tpl) {
                    if ($BPath == 'Frontend/Themes') {
                        $themeModule = $possiblePath . '/' . $tpl . '/Modules';
                        $tplsh = array_diff(scandir($themeModule), $excludes);
                        if ($tplsh) {
                            foreach ($tplsh as $themeModuleName) {
                                $templates[] = '/Modules/' . $themeModuleName . '/Layout/Templates';
                                $templates[] = '/Modules/' . $themeModuleName . '/Layout/Widgets';
                            }
                        }
                    }
                    foreach ($templates as $template) {
                        $possibletpl = $possiblePath . '/' . $tpl . $template;
                        if (is_dir(WEBROOT . $possibletpl)) {
                            $tplsz = array_diff(scandir(WEBROOT . $possibletpl), $excludes);
                            if (!empty($tplsz)) {
                                // append full path
                                foreach ($tplsz as $tpl_Z) {
                                    if (strpos($tpl_Z, '.tpl') !== false) {
                                        $templatePaths[] = $possibletpl . '/' . $tpl_Z;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (!empty($templatePaths)) {
            foreach ($templatePaths as $templatePath) {
                if ($force === true) {
                    $this->write($templatePath, $this->ruleParser($this->getFile($templatePath)));
                } else {
                    if (!file_exists(str_replace('.tpl', EXTENSION, $templatePath))) {
                        $this->write($templatePath, $this->ruleParser($this->getFile($templatePath)));
                    } else {
                        $excluded[] = $templatePath;
                    }
                }
            }
            if (!empty($excluded)) {
                exit('not all files are converted, use forced to overwrite' . PHP_EOL);
            }
        }
    }

    /**
     * Get Correct version looks a the project version
     * to find and return it's source directory
     *
     * @return string returns the correct source dir
     */
    public function getCorrectSourceVersion()
    {
        // checking what version
        $version = $this->getFile('../VERSION.md');
        switch (true)
        {
            case (strpos($version, '3.9.') !== false):
                $source = '../src/';
                break;

            case (strpos($version, '3.8.') !== false):
                $source = '../src/';
                break;

            default:
                $source = '../src/';
                break;
        }
        return $source;
    }

    /**
     * Write saves to content to a new file
     *
     * @param  string $input    file full path
     * @param  string $filedata file content
     */
    public function write($input, $filedata)
    {
        // OUR OUTPUT CODE
        $input = str_replace('.tpl', EXTENSION, $input);
        $file = WEBROOT . $input;

        file_put_contents($file, $filedata);
        $time = $this->timestamp(2) - $this->previousTimeStamp;
        echo 'done in ' . $time . ' milliseconds' . PHP_EOL;
        $this->previousTimeStamp = $this->timestamp(2) + $this->previousTimeStamp;
    }

    /**
     * Return the file content of a given file
     *
     * @param  string $input file full path
     *
     * @return string        file content
     */
    public function getFile($input)
    {
        if ($this->isFile($input)) {
            // grab file from command line parameter
            $file = WEBROOT . $input;
            $stream = fopen($file, 'r');
            $filedata = stream_get_contents($stream);
            fclose($stream);
            return $filedata;
        }
    }

    /**
     * File checker
     * @param  string  $file file full path
     * @return boolean
     */
    public function isFile($file)
    {
        if (file_exists($file)) {
            return true;
        }
        exit('Could not open input file: '. WEBROOT . $file . PHP_EOL);
    }

    /**
     * preg_replace sprint_f
     * Combines 2 function into one that's more ideal for parsing
     * as it string replaces any found matches with a new given value
     *
     * @param  string $regex    the regex
     * @param  format $format   the replace value
     * @param  string $filedata file content
     *
     * @return string           if successful returns file content with replaced data
     */
    public function pregReplaceSprintf($regex, $format, $filedata)
    {
        preg_match_all($regex, $filedata, $match);
        if  (isset($match[3])) {
            $values = array();
            foreach ($match[1] as $key => $value) {
                   $values[] = sprintf($format, $value, $match[2][$key], $match[3][$key]);
            }
            return str_replace($match[0], $values , $filedata);
        } elseif (isset($match[2])) {
            $values = array();
            foreach ($match[1] as $key => $value) {
                $values[] = sprintf($format, $value, $match[2][$key]);
            }
            return str_replace($match[0], $values , $filedata);
        } elseif (isset($match[1])) {
            $values = array();
            foreach ($match[1] as $value) {
                $values[] = sprintf($format, $value);
            }
            return str_replace($match[0], $values , $filedata);
        }
        else {
            echo ('no match found on the ' . $regex . ' line');
            exit;
        }
    }

    /**
     * Converts a noun until it's ready
     *
     * @param  string $noun a noun
     * @return string       converted noun
     */
    public function dePluralize($noun)
    {
        $nouns = array(
            'modules' => 'module'
        );

        // shorten
        $new_plur = pathinfo($noun);
        if (isset($new_plur['extension'])) {
            $noun = $new_plur['extension'];
        }

        if (in_array($noun, array_keys($nouns))) {
            $noun = $nouns[$noun];
        } elseif (substr($noun, -2) == 'es') {
            $noun = substr($noun, 0, -2);
        } elseif (substr($noun, -1) == 's') {
            $noun = substr($noun, 0, -1);
        } else {
            $noun = '_itr_'.$this->interationNr;
            $this->interationNr++;
        }
        return $noun;
    }

    /**
     * Iteration Converter
     *
     * @param  string $filedata file to convert
     * @return string           file in converted form
     */
    public function pregReplaceIterations($filedata)
    {
        preg_match_all('/{iteration:(.*?)}(.*){\/iteration:(.*?)}/si', $filedata, $match);

        if ($match[1]) {
            foreach ($match[1] as $value) {
                $new_val = $this->dePluralize($value);
                $prev_match = $match[0];
                $match[0] = str_replace('{iteration:'.$value.'}','{% for '. $new_val . ' in ' . $value . '_ %}', $match[0]);
                $match[0] = str_replace('{/iteration:'.$value.'}','{% endfor %}', $match[0]);
                $match[0] = str_replace($value, $new_val, $match[0]);
                $match[0] = str_replace($new_val.'_', $value, $match[0]);
                $filedata = str_replace($prev_match, $match[0], $filedata);
                return $this->pregReplaceIterations($filedata);
            }
        }
        return $filedata;
    }

    /** STRING CONVERSIONS START HERE **/
    public function ruleParser($filedata)
    {
        // Exceptions
        $filedata = $this->pregReplaceSprintf('/:{\$(.*?)}/ism', ':%s', $filedata);

        $filedata = $this->pregReplaceIterations($filedata);

        // filter endfor
        // $filedata = $this->pregReplaceSprintf('/{\$(.*?)\)}/', '{{ %s ) }}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{\$(.*?)}/ims', '{{ %s }}', $filedata);

        $filedata = $this->pregReplaceSprintf('/{\$now\|date:(.*?)}/i', '{{ now|date(%1$s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|date:(.*?):(.*?)}/', '|spoon_date(%1$s, %2$s})', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|sprintf:(.*?)}/', '|sprintf(%s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|usersetting:(.*?)}/', '|usersetting(%s})', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|geturlforblock:(.*?)}/', '|geturlforblock(%s})', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|getnavigation:(.*?):(.*?):(.*?)}/', '|getnavigation(%1$s, %2$s, %3$s)|raw }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|getsubnavigation:(.*?):(.*?):(.*?)}/', '|getsubnavigation(%1$s, %2$s, %3$s)|raw }', $filedata);

        $filedata = str_replace('/\|getmainnavigation}/', '|getmainnavigation|raw }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|truncate:(.*?)}/', '|truncate(%1$s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|geturl:(.*?):(.*?)}/', '|geturl(%1$s, %2$s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|geturl:(.*?)}/', '|geturl(%1$s) }', $filedata);
        $filedata = str_replace('/Grid}/', 'Grid|raw }', $filedata);

        // string replacers in the last part
        $filedata = str_replace('*}', '#}', $filedata); // comments
        $filedata = str_replace('{*', '{#', $filedata); // comments
        $filedata = str_replace('|ucfirst', '|capitalize', $filedata);
        $filedata = str_replace('.tpl', EXTENSION, $filedata);
        $filedata = str_replace("\t", "  ", $filedata);

        // raw converter
        $filedata = str_replace('siteHTMLHeader', 'siteHTMLHeader|raw', $filedata);
        $filedata = str_replace('siteHTMLFooter', 'siteHTMLFooter|raw', $filedata);
        $filedata = str_replace(' metaCustom ', ' metaCustom|raw ', $filedata);
        $filedata = str_replace(' meta ', ' meta|raw ', $filedata);
        $filedata = str_replace('blockContent', 'blockContent|raw', $filedata);

        // includes
        $filedata = $this->pregReplaceSprintf('/{include:(.*)}/i', '{%% include "%s" %%}', $filedata); // for includes

        // operators
        $filedata = $this->pregReplaceSprintf('/{option:!(.*?)}/i', '{%% if not %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{\/option:(.*?)}/i', '{%% endif %%}', $filedata); // for {option: variable }
        $filedata = $this->pregReplaceSprintf('/{option:(.*?)}/i', '{%% if %s %%}', $filedata);

        //form values
        $filedata = $this->pregReplaceSprintf('/{\/form:(.*?)}/i', '{%% endform %%}', $filedata); // for {form:add}
        $filedata = $this->pregReplaceSprintf('/{form:(.*?)}/i', '{%% form %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ txt(.*?) }}/i', '{%% form_field %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ file(.*?) }}/i', '{%% form_field %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ ddm(.*?) }}/i', '{%% form_field %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ chk(.*?) }}/i', '{%% form_field %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/form_field (.*?)Error/i', 'form_field_error %s', $filedata);

        // caching
        $filedata = $this->pregReplaceSprintf('/{\/cache:(.*?)}/i', '{# endcache #}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{cache:(%s)}/i', '{# cache %s #}', $filedata);

        $filedata = $this->pregReplaceSprintf('/{{ lbl(.*?) }}/i', '{{ lbl.%s }}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ msg(.*?) }}/i', '{{ msg.%s }}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ err(.*?) }}/i', '{{ err.%s }}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ act(.*?) }}/i', '{{ act.%s }}', $filedata);

        return $filedata;
    }
}

$converter = New Spoon2Twig();
$converter->start($argv);
